{"meta":{"title":"小瑞安全博客","subtitle":"喜欢安全的95后苦逼青年！","description":null,"author":"小瑞安全博客","url":"http://www.hackerui.me"},"pages":[{"title":"","date":"2017-04-19T01:53:31.225Z","updated":"2017-04-19T01:53:31.225Z","comments":true,"path":"404.html","permalink":"http://www.hackerui.me/404.html","excerpt":"","text":"404"},{"title":"categories","date":"2017-05-09T01:29:25.147Z","updated":"2017-04-17T11:22:22.000Z","comments":true,"path":"categories/index.html","permalink":"http://www.hackerui.me/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-05-09T01:40:10.589Z","updated":"2017-05-09T01:40:10.589Z","comments":true,"path":"tags/index.html","permalink":"http://www.hackerui.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"sqlmap基础注入","slug":"sqlmap基础注入","date":"2017-04-16T06:18:28.000Z","updated":"2017-04-18T07:49:16.584Z","comments":true,"path":"2017/04/16/sqlmap基础注入/","link":"","permalink":"http://www.hackerui.me/2017/04/16/sqlmap基础注入/","excerpt":"SQLMAP是一款基于python开发的SQL注入工具，几乎支持现在所有的数据库，功能非常强大。由于是国外的产品，所以对于我这种英语水平不高的菜鸟来说，使用起来会有点困难。虽然现在已经能熟练使用大部分功能了，但还是把中文解释贴过来，方便以后使用。Options（选项）：–version 显示程序的版本号并退出-h, –help 显示此帮助消息并退出-v VERBOSE 详细级别：0-6（默认为1）","text":"SQLMAP是一款基于python开发的SQL注入工具，几乎支持现在所有的数据库，功能非常强大。由于是国外的产品，所以对于我这种英语水平不高的菜鸟来说，使用起来会有点困难。虽然现在已经能熟练使用大部分功能了，但还是把中文解释贴过来，方便以后使用。Options（选项）：–version 显示程序的版本号并退出-h, –help 显示此帮助消息并退出-v VERBOSE 详细级别：0-6（默认为1）Target（目标）：以下至少需要设置其中一个选项，设置目标URL。-d DIRECT 直接连接到数据库。-u URL, –url=URL 目标URL。-l LIST 从Burp或WebScarab代理的日志中解析目标。-r REQUESTFILE 从一个文件中载入HTTP请求。-g GOOGLEDORK 处理Google dork的结果作为目标URL。-c CONFIGFILE 从INI配置文件中加载选项。Request（请求）：这些选项可以用来指定如何连接到目标URL。–data=DATA 通过POST发送的数据字符串–cookie=COOKIE HTTP Cookie头–cookie-urlencode URL 编码生成的cookie注入–drop-set-cookie 忽略响应的Set – Cookie头信息–user-agent=AGENT 指定 HTTP User – Agent头–random-agent 使用随机选定的HTTP User – Agent头–referer=REFERER 指定 HTTP Referer头–headers=HEADERS 换行分开，加入其他的HTTP头–auth-type=ATYPE HTTP身份验证类型（基本，摘要或NTLM）(Basic, Digest or NTLM)–auth-cred=ACRED HTTP身份验证凭据（用户名:密码）–auth-cert=ACERT HTTP认证证书（key_file，cert_file）–proxy=PROXY 使用HTTP代理连接到目标URL–proxy-cred=PCRED HTTP代理身份验证凭据（用户名：密码）–ignore-proxy 忽略系统默认的HTTP代理–delay=DELAY 在每个HTTP请求之间的延迟时间，单位为秒–timeout=TIMEOUT 等待连接超时的时间（默认为30秒）–retries=RETRIES 连接超时后重新连接的时间（默认3）–scope=SCOPE 从所提供的代理日志中过滤器目标的正则表达式–safe-url=SAFURL 在测试过程中经常访问的url地址–safe-freq=SAFREQ 两次访问之间测试请求，给出安全的URLOptimization（优化）：这些选项可用于优化SqlMap的性能。-o 开启所有优化开关–predict-output 预测常见的查询输出–keep-alive 使用持久的HTTP（S）连接–null-connection 从没有实际的HTTP响应体中检索页面长度–threads=THREADS 最大的HTTP（S）请求并发量（默认为1）Injection（注入）：这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。-p TESTPARAMETER 可测试的参数（S）–dbms=DBMS 强制后端的DBMS为此值–os=OS 强制后端的DBMS操作系统为这个值–prefix=PREFIX 注入payload字符串前缀–suffix=SUFFIX 注入payload字符串后缀–tamper=TAMPER 使用给定的脚本（S）篡改注入数据Detection（检测）：这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。–level=LEVEL 执行测试的等级（1-5，默认为1）–risk=RISK 执行测试的风险（0-3，默认为1）–string=STRING 查询时有效时在页面匹配字符串–regexp=REGEXP 查询时有效时在页面匹配正则表达式–text-only 仅基于在文本内容比较网页Techniques（技巧）：这些选项可用于调整具体的SQL注入测试。–technique=TECH SQL注入技术测试（默认BEUST）–time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）–union-cols=UCOLS 定列范围用于测试UNION查询注入–union-char=UCHAR 用于暴力猜解列数的字符Fingerprint（指纹）：-f, –fingerprint 执行检查广泛的DBMS版本指纹Enumeration（枚举）：这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。-b, –banner 检索数据库管理系统的标识–current-user 检索数据库管理系统当前用户–current-db 检索数据库管理系统当前数据库–is-dba 检测DBMS当前用户是否DBA–users 枚举数据库管理系统用户–passwords 枚举数据库管理系统用户密码哈希–privileges 枚举数据库管理系统用户的权限–roles 枚举数据库管理系统用户的角色–dbs 枚举数据库管理系统数据库–tables 枚举的DBMS数据库中的表–columns 枚举DBMS数据库表列–dump 转储数据库管理系统的数据库中的表项–dump-all 转储所有的DBMS数据库表中的条目–search 搜索列（S），表（S）和/或数据库名称（S）-D DB 要进行枚举的数据库名-T TBL 要进行枚举的数据库表-C COL 要进行枚举的数据库列-U USER 用来进行枚举的数据库用户–exclude-sysdbs 枚举表时排除系统数据库–start=LIMITSTART 第一个查询输出进入检索–stop=LIMITSTOP 最后查询的输出进入检索–first=FIRSTCHAR 第一个查询输出字的字符检索–last=LASTCHAR 最后查询的输出字字符检索–sql-query=QUERY 要执行的SQL语句–sql-shell 提示交互式SQL的shellBrute force（蛮力）：这些选项可以被用来运行蛮力检查。–common-tables 检查存在共同表–common-columns 检查存在共同列User-defined function injection（用户自定义函数注入）：这些选项可以用来创建用户自定义函数。–udf-inject 注入用户自定义函数–shared-lib=SHLIB 共享库的本地路径File system access（访问文件系统）：这些选项可以被用来访问后端数据库管理系统的底层文件系统。–file-read=RFILE 从后端的数据库管理系统文件系统读取文件–file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件–file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径Operating system access（操作系统访问）：这些选项可以用于访问后端数据库管理系统的底层操作系统。 –os-cmd=OSCMD 执行操作系统命令–os-shell 交互式的操作系统的shell–os-pwn 获取一个OOB shell，meterpreter或VNC–os-smbrelay 一键获取一个OOB shell，meterpreter或VNC–os-bof 存储过程缓冲区溢出利用–priv-esc 数据库进程用户权限提升–msf-path=MSFPATH Metasploit Framework本地的安装路径–tmp-path=TMPPATH 远程临时文件目录的绝对路径Windows注册表访问：这些选项可以被用来访问后端数据库管理系统Windows注册表。–reg-read 读一个Windows注册表项值–reg-add 写一个Windows注册表项值数据–reg-del 删除Windows注册表键值–reg-key=REGKEY Windows注册表键–reg-value=REGVAL Windows注册表项值–reg-data=REGDATA Windows注册表键值数据–reg-type=REGTYPE Windows注册表项值类型General（一般）：这些选项可以用来设置一些一般的工作参数。-t TRAFFICFILE 记录所有HTTP流量到一个文本文件中-s SESSIONFILE 保存和恢复检索会话文件的所有数据–flush-session 刷新当前目标的会话文件–fresh-queries 忽略在会话文件中存储的查询结果–eta 显示每个输出的预计到达时间–update 更新SqlMap–save file保存选项到INI配置文件–batch 从不询问用户输入，使用所有默认配置。Miscellaneous（杂项）：–beep 发现SQL注入时提醒–check-payload IDS对注入payloads的检测测试–cleanup SqlMap具体的UDF和表清理DBMS–forms 对目标URL的解析和测试形式–gpage=GOOGLEPAGE 从指定的页码使用谷歌dork结果–page-rank Google dork结果显示网页排名（PR）–parse-errors 从响应页面解析数据库管理系统的错误消息–replicate 复制转储的数据到一个sqlite3数据库–tor 使用默认的Tor（Vidalia/ Privoxy/ Polipo）代理地址–wizard 给初级用户的简单向导界面SQLMAP实战操作：1.ACCESS数据库：sqlmap.py -u “url” /-u为常规扫描参数/sqlmap.py -u “url” –tables /–tables拆数据库表/sqlmap.py -u “url” –columns -T “要拆的表名”/列出指定表名/sqlmap.py -u “url” –dump -T “要拆的表名”-C “要拆的字段名” /–dump为拆解字段名会保存在sqlmap/output目录下/2.MYSQL数据库：sqlmap.py -u “url” /扫描注入点/sqlmap.py -u “url” –dbs /列出所有数据库/sqlmap.py -u “url” –current-db /列出当前数据库/sqlmap.py -u “url” –current-user /列出当前用户/sqlmap.py -u “url” –tables -D “当前数据库名” /拆解当前数据库表/sqlmap.py -u “url” –columns -T “要拆得的表名” -D “当前数据库名” /拆解指定表字段名/sqlmap.py -u “url” –dump -C “字段名” -T “表名” -D “当前数据库”3.SQLSERVER数据库：sqlmap.py -u “url” /扫描注入点/sqlmap.py -u “url” –dbs /列出所有数据库/sqlmap.py -u “url” –current-db /列出当前数据库/sqlmap.py -u “url” –current-user /列出当前用户/sqlmap.py -u “url” –tables -D “当前数据库名” /拆解当前数据库表/sqlmap.py -u “url” –columns -T “要拆得的表名” -D “当前数据库名” /拆解指定表字段名/sqlmap.py -u “url” –dump -C “字段名” -T “表名” -D “当前数据库”SQLSERVER操作和MYSQL是一样的！！！常见的几种数据库！！！4.COOKIE注入：sqlmap.py -u “www.xxx.com/asp或者www.xxx.com/php” –cookie “参数名如id=1” –level 2/level为提升权限/什么数据库就按照上面的数据库加上cookie语句拆解就行了5.POST注入：抓包保存到SQLMAP目录下.txt的文件然后输入指令sqlmap.py -r xxx.txt /xxx.txt为保存包文件的文件名”sqlmap.py -u “url” –data “POST参数”6.执行shell命令：sqlmap.py -u “url” –os-cmd=”net user” /执行net user命令/sqlmap.py -u “url” –os-shell /系统交互的shell/7.注入HTTP请求 :sqlmap.py -r xxx.txt –dbs /xxx.txt内容为HTTP请求/8.绕过WAF的tamper插件使用：sqlmap.py -u “url” –tamper “xxx.py”sqlmap.py -u “url” –tamper=”xxx.py”关于tamper脚本详细说明在本博客中有，（敬请期待）9.将注入语句插入到指定位置：sqlmap.py -u “url(www.xxx.com/id/1.html)” –dbs有些网站是采用伪静态的页面使用SQLMAP的普通注入是不行的，所以SQLMAP提供了””参数将SQL语句插入指定位置，一般用于伪静态注入。在使用HTTP注入时使用-r参数也可以直接在文本中添加号10.延时注入：sqlmap –dbs -u “url” –delay 0.5 /延时0.5秒/sqlmap –dbs -u “url” –safe-freq /请求2次/11.使用谷歌语法搜索注入(Google hack)：sqlmap.py -g “inurl:asp?id=1” /*””内为搜索语法，如：inurl,intitle,site,filetype等等我朋友总结了很多可以参考一下：http://blog.csdn.net/wsh19930305/article/details/62247962同时欢迎大家关注小瑞的个人博客：www.hackerui.me","categories":[],"tags":[{"name":"渗透","slug":"渗透","permalink":"http://www.hackerui.me/tags/渗透/"}]},{"title":"Hexo搭建个人博客","slug":"2017-04-15-HEXO搭建个人博客","date":"2017-04-15T07:42:06.000Z","updated":"2017-04-18T07:51:09.592Z","comments":true,"path":"2017/04/15/2017-04-15-HEXO搭建个人博客/","link":"","permalink":"http://www.hackerui.me/2017/04/15/2017-04-15-HEXO搭建个人博客/","excerpt":"经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。 本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1767361332 ，或者给我发邮件：wang_xiansen0@163.com ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客HEXO进阶，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看Jekyll搭建个人博客","text":"经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。 本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1767361332 ，或者给我发邮件：wang_xiansen0@163.com ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客HEXO进阶，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看Jekyll搭建个人博客 正文： 这边教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。 配置环境安装Node（必须）作用：用来生成静态页面的到Node.js官网下载相应平台的最新版本，一路安装即可。 安装Git（必须）作用：把本地的hexo内容提交到github上去.安装Xcode就自带有Git，我就不多说了。 申请GitHub（必须）作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。 正式安装HEXO Node和Git都安装好后，可执行如下命令安装hexo： $ sudo npm install -g hexo 初始化创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令： hexo init 好啦，至此，全部安装工作已经完成！ 生成静态页面继续再Blog目录下执行如下命令，生成静态页面 hexo generate （hexo g 也可以） 本地启动启动本地服务，进行文章预览调试，命令： hexo server 浏览器输入http://localhost:4000我不知道你们能不能，反正我不能，因为我还有环境没配置好 常见的HEXO配置错误：12345ERROR Plugin load failed: hexo-server原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.解决方法，执行命令：$ sudo npm install hexo-server 12345678910执行命令hexo server，提示：Usage: hexo&lt;Command&gt; ....原因：我认为是没有生成本地服务解决方法，执行命令：$ npm install hexo-server --save提示：hexo-server@0.1.2 node_modules/hexo-server.... 表示成功了[参考](https://hexo.io/zh-cn/docs/server.html) 这个时候再执行：$ hexo-server 得到: INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 这个时候再点击http://0.0.0.0:4000，正常情况下应该是最原始的画面，但是我看到的是：白板和Cannot GET / 几个字原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： npm install hexo-renderer-ejs --save npm install hexo-renderer-stylus --save npm install hexo-renderer-marked --save 这个时候再重新生成静态文件，命令： hexo generate （或hexo g） 启动本地服务器： hexo server （或hexo s） 再点击网址http://0.0.0.0:4000 OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。参考链接，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。 配置Github建立Repository建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有： Blog ｜ ｜－－ _config.yml ｜－－ node_modules ｜－－ public ｜－－ source ｜－－ db.json ｜－－ package.json ｜－－ scaffolds ｜－－ themes 现在我们需要_config.yml文件，来建立关联，命令： vim _config.yml 翻到最下面，改成我这样子的，注意： : 后面要有空格 deploy: type: git repository: https://github.com/leopardpan/leopardpan.github.io.git branch: master 执行如下命令才能使用git部署 npm install hexo-deployer-git --save 网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。然后，执行配置命令： hexo deploy 然后再浏览器中输入http://5279314.github.io/就行了，我的 github 的账户叫 5279314 ,把这个改成你 github 的账户名就行了 部署步骤每次部署的步骤，可按以下三步来进行。 hexo clean hexo generate hexo deploy 一些常用命令： hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help #查看帮助 hexo version #查看Hexo的版本 这里有大量的主题列表使用方法里面都有详细的介绍，我就不多说了。我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，? Cover - A chic theme with facebook-like cover photo Oishi - A white theme based on Landscape plus and Writing. Sidebar - Another theme based on Light with a simple sidebar TKL - A responsive design theme for Hexo. 一个设计优雅的响应式主题 Tinnypp - A clean, simple theme based on Tinny Writing - A small and simple hexo theme based on Light Yilia - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。 Pacman voidy - A theme with dynamic tagcloud and dynamic snow 一些基本路径 文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。 Markdown语法参考链接: 作业部落 Q&amp;A 问：如何让文章想只显示一部分和一个 阅读全文 的按钮？答：在文章中加一个 &lt;!--more--&gt; ， &lt;!--more--&gt; 后面的内容就不会显示出来了。 问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，出现 404 .答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。 转载请注明原地址，小瑞安全博客：http://5279314.github.io 谢谢！","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"http://www.hackerui.me/tags/博客/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-04-14T07:42:06.000Z","updated":"2017-04-14T03:04:30.716Z","comments":true,"path":"2017/04/14/hello-world/","link":"","permalink":"http://www.hackerui.me/2017/04/14/hello-world/","excerpt":"","text":"在百度的帮助下，这个小瑞安全博客终于搭建起来了。 折腾了两天多，在github page上看到自己的博客加载下来时，突然有种错综复杂的恍惚感。是的，它不是qq空间，不是新浪博客，不是豆瓣小站，也不是贴吧。它更像是属于自己的一块小小的领地，因而我满足于这种归属感。我愿在上面安静劳作。 一个农民，通过自身努力终于分到了一块地，不再需要在地主的土地上创造流量价值时，于是翻身作主的他可以宣告说：Hello World。当然这个农民确切来说是个码农。 感谢Zespia提供的slash主题。我很喜欢这种色调。 ——BY:小瑞","categories":[],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.hackerui.me/tags/测试/"}]}]}